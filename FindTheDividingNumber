//The problem statement goes as follow:

You have to find the maximum integer among the set of integers and divide the integer by 2.
Since this is an integer division the result of division will be an integer.
After division if the integer is greater than 0, then we put the updated integer again in the set of integers.
Asha gives you m queries, each query q[i] means, that q[i]âˆ’1number of operations has already been performed and its time to perform q[i]thoperation. Your task is to tell that for q[i]th
 operation which integer will get divided  1 <=n,m <=10^6 , q[i]>q[i-1]//
 import java.util.*;
  import java.io.*;
  
  public class Main {
    public static void main(String args[]) throws IOException {
      
      //write your code here
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      int m=sc.nextInt();
      PriorityQueue<Integer> queue=new PriorityQueue<>(n,Collections.reverseOrder());
      for(int i=0;i<n;i++) queue.add(sc.nextInt());
      int t=1,f=0;
      for(int i=0;i<m;i++)
      {
        int q=sc.nextInt();
        for(int j=t;j<q;j++)
        {
          if(queue.isEmpty()){f=1;break;}
          int max=queue.remove()/2;
          if(max>0)queue.add(max);
        }
        
        if(f==1)break; int max;System.out.println(max=queue.remove());
        if(max/2>0)queue.add(max/2);
        t=q+1;
      }
    }
  }(This particular problem makes use of Priority Queue inorder to reduce the time complexity of O(n*m) to O(m*log n). And important thing
  to note is that A PriorityQueue in Java does not have any restriction with regard to duplicate elements.) 
  
